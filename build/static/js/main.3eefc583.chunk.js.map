{"version":3,"sources":["APIs/MyJsonAPI.js","APIs/GoogleMapsAPI.js","components/Filter.js","components/ListItem.js","components/List.js","components/Map.js","components/ResponsiveDrawer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","url","id","key","client","center","lat","lng","Filter","handleChange","e","_this","setState","filterInput","target","value","markers","props","jobs","map","job","isMatched","company","toLowerCase","includes","marker","find","isVisible","liftState","_this2","this","react_default","a","createElement","noValidate","autoComplete","TextField_default","fullwidth","style","width","margin","label","align","placeholder","InputLabelProps","shrink","onChange","Component","ListItem","x","addressArray","address","split","Card_default","CardActions_default","CardContent_default","onClick","handleMarkerClick","Typography_default","variant","color","position","component","phone","jobCard","List","listItem","ListItem_ListItem","Object","assign","handleFilterJobs","length","filter","s","MyMapComponent","withScriptjs","withGoogleMap","lib","handleMapClick","defaultZoom","zoom","defaultCenter","index","animation","selected","isOpen","src","photo","alt","rel","href","website","Map","isMarkerShown","loadingElement","height","containerElement","mapElement","ResponsiveDrawer","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleDrawerToggle","state","mobileOpen","_this$props","classes","theme","drawer","className","toolbar","Filter_Filter","Divider_default","List_List","root","AppBar_default","appBar","Toolbar_default","IconButton_default","aria-label","navIconHide","Menu_default","title","noWrap","Hidden_default","mdUp","SwipeableDrawer_default","minFlingVelocity","anchor","direction","open","onOpen","onClose","paper","drawerPaper","ModalProps","keepMounted","smDown","implementation","Drawer_default","overflow","content","Map_Map","withStyles","flexGrow","zIndex","display","defineProperty","backgroundColor","marginLeft","breakpoints","up","concat","mixins","palette","background","default","padding","spacing","unit","textAlign","withTheme","APIs","gMaps","params","URLSearchParams","gMapsAPI","myJson","myJsonAPI","createMuiTheme","typography","useNextVariants","suppressDeprecationWarnings","App","handleError","error","toast","fontWeight","role","handleOffline","warning","handleCached","success","closeAllMarkers","latlng","setTimeout","o","googleMapURL","axios","get","then","res","data","catch","core_styles","components_ResponsiveDrawer","handleFilterChange","react_toastify_lib","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3eefc583.chunk.js","sourcesContent":["const url = 'https://api.myjson.com/bins/'\nconst id = '10q460'\n\nmodule.exports = {\n\turl, id\n}\n","/*\nThe Google Maps API for this project is currently set up to use a borrowed\nclient ID instead of a key. To use an API key instead, do the following:\n1) Follow instructions inside `const APIs` in App.js if you haven't already.\n2) Paste your API key inside the quotes as instructed below.\n3) Save your changes and refresh.\n*/\n\nconst key = \"PASTE_YOUR_API_KEY_HERE\"\n\nconst url = 'https://maps.googleapis.com/maps/api/js?'\nconst client = 'gme-nianticinc'\nconst center = {lat: 41.623069, lng: -93.698223}\nmodule.exports = {\n\tkey, url, client, center\n}\n","// This component is based on the Text Fields demo code at:\n// https://material-ui.com/demos/text-fields/#outlined\n\nimport React, { Component } from 'react'\nimport TextField from '@material-ui/core/TextField'\n\nexport default class Filter extends Component {\n\n    handleChange = (e) => {\n        this.setState({filterInput: e.target.value})\n        const markers = this.props.jobs.map(job => {\n            const isMatched = job.company.toLowerCase().includes(e.target.value.toLowerCase())\n            const marker = this.props.markers.find(marker => marker.id === job.id)\n            if(isMatched) {\n                marker.isVisible = true\n            }else{\n                marker.isVisible = false\n            }\n            return marker\n        })\n        this.props.liftState({markers})\n        this.props.liftState({filterInput: e.target.value})\n    }\n\n    render() {\n\n        return (\n            <form noValidate autoComplete=\"off\">\n\n                <TextField\n                    fullwidth=\"true\"\n                    style={{ width: '90%', margin: '6px 8px 2px 8px' }}\n                    id=\"filter-input-field\"\n                    label=\"Filter\"\n                    margin=\"dense\"\n                    align=\"center\"\n                    placeholder=\"begin typing to filter results\"\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                    value={this.props.filterInput}\n                    onChange={(e) => this.handleChange(e)}\n                />\n            </form>\n        )\n    }\n}\n","\n\nimport React, {Component} from 'react'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport Typography from '@material-ui/core/Typography'\nimport Card from '@material-ui/core/Card'\n\nexport default class ListItem extends Component {\n\n    render() {\n\n        // Split input into comma-delimited array\n        const split = s => {\n            return (s.split(','))\n        }\n\n        const jobCard = x => {\n\n            // use split() to break job address into a comma-delimited array\n            const addressArray = split(x.address)\n\n            return (\n                <Card\n                    /* tabIndex={0}\n                    onSelect={console.log(x.company + ' is focused')} */\n                    >\n                    <CardActions\n                        style={{width:'100%'}}\n                        >\n                        <CardContent\n                            style={{width:'100%'}}\n                            onClick={() => this.props.handleMarkerClick(\n                                this.props.markers[x.id]\n                        )}>\n                            <Typography variant=\"h6\">\n                                <span>{x.company}</span>\n                            </Typography>\n                            <Typography color=\"textSecondary\">\n                                <span>{x.position}</span>\n                            </Typography>\n                            <Typography component=\"p\">\n\n                                <span>\n                                    {/* Using addressArray, display job address\n                                    with a line break after the first comma */}\n                                    {addressArray[0]}\n                                    <br/>\n                                    {addressArray[1]},{addressArray[2]}\n                                </span>\n                                <br />\n\n                                <span>{x.phone}</span>\n                            </Typography>\n                        </CardContent>\n                    </CardActions>\n                </Card>\n            )\n        }\n\n        return (\n            <div>{jobCard(this.props.job)}<br /></div>\n        )\n    }\n\n}\n","\n\nimport React, {Component} from 'react'\n// import keydown from 'react-keydown'\nimport ListItem from './ListItem'\n\nexport default class List extends Component {\n\n    listItem = (job) => {\n        return(\n            <ListItem\n                {...this.props}\n                key={job.id}\n                job={job}\n            />\n        )\n    }\n\n    handleFilterJobs = () => {\n\n        if (this.props.filterInput.length > 0) {\n            const jobs = this.props.jobs.filter(job => job.company\n                .toLowerCase()\n                .includes(this.props.filterInput.toLowerCase()))\n            return jobs.map(job => (\n                this.listItem(job)\n            ))\n        } else {\n            return this.props.jobs.map(job => (\n                this.listItem(job)\n            ))\n        }\n    }\n\n    render() {\n\n        return (\n            <div>\n                {this.handleFilterJobs()}\n            </div>\n        )\n    }\n\n}\n","// This component is modeled after the one Forrest Walker demonstrated in his\n// tutorial video series on YouTube (https://goo.gl/XrrXg9). Thanks, Forrest!\n\nimport React, {Component} from 'react'\nimport {withScriptjs, withGoogleMap, GoogleMap, Marker, InfoWindow } from 'react-google-maps'\n\n// Split input into comma-delimited array\nconst split = s => {\n    return (s.split(','))\n}\n\nconst MyMapComponent = withScriptjs(\n    withGoogleMap(props => (\n\n        <GoogleMap\n            onClick={props.handleMapClick}\n            defaultZoom={11}\n            zoom={props.zoom}\n            defaultCenter={props.center}\n            center={props.center}\n        >\n        {props.markers &&\n            props.markers\n                .filter(marker => marker.isVisible)\n                .map((marker, index) => (\n                <Marker\n                    key={index} {...props}\n                    position={{ lat: marker.lat, lng: marker.lng }}\n                    onClick={() => props.handleMarkerClick(marker)}\n                    animation={marker.id === props.selected.id ? 1 : 2}\n                >\n\n                    {marker.isOpen && (\n\n                        <InfoWindow id='info-window'>\n                            <div>\n                                <img id='info-window-img'\n                                    src={props.selected.photo}\n                                    alt={props.selected.company}\n                                />\n                                <h2>{props.selected.position}</h2>\n                                <h3>\n                                    {/* use split() to break job address into\n                                    a comma-delimited array, then display\n                                    street address on first line, followed by\n                                    city, state, and zip on second line */}\n                                    {split(props.selected.address)[0]}\n                                    <br/>\n                                    {split(props.selected.address)[1]},\n                                    {split(props.selected.address)[2]}\n                                </h3>\n                                <h3>{props.selected.phone}</h3>\n                                <h3>\n                                    <a\n                                        target='_blank'\n                                        rel='noopener noreferrer'\n                                        href={props.selected.website}\n                                    >\n                                        Website\n                                    </a>\n                                </h3>\n                            </div>\n                        </InfoWindow>\n                    )}\n                </Marker>\n            ))}\n        </GoogleMap>\n    ))\n)\n\n\n\n\nexport default class Map extends Component {\n\n    render() {\n\n        return (\n            <MyMapComponent\n                {...this.props}\n                isMarkerShown\n                loadingElement={<div style={{ height: `100%` }} />}\n                containerElement={<div style={{ height: `calc(100vh - calc(18px + 5vmin))` }} />}\n                mapElement={<div style={{ height: `100%` }} />}\n            />\n        )\n    }\n}\n","// This component is based on the ResponsiveDrawer demo code at:\n// https://material-ui.com/demos/drawers/#responsive-drawer\n\n// Import Remote Deps & Components\nimport React, {Component} from 'react'\nimport Drawer from '@material-ui/core/Drawer'\nimport AppBar from '@material-ui/core/AppBar'\nimport Hidden from '@material-ui/core/Hidden'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Divider from '@material-ui/core/Divider'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport Typography from '@material-ui/core/Typography'\nimport IconButton from '@material-ui/core/IconButton'\nimport {withStyles} from '@material-ui/core/styles'\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer'\n\n// Import Local Sub-Components\nimport Filter from './Filter'\nimport List from './List'\nimport Map from './Map'\n\nconst drawerWidth = 'calc(5vw + 240px)'\n\nconst styles = theme => ({\n\n    root: {\n        flexGrow: 1,\n        height: '100vh',\n        zIndex: 1,\n        overflow: 'hidden',\n        position: 'relative',\n        display: 'flex',\n        width: '100%',\n    },\n    appBar: {\n        backgroundColor: 'rgb(45, 45, 45)',\n        position: 'absolute',\n        marginLeft: drawerWidth,\n        [theme.breakpoints.up('md')]: {\n            width: `calc(100vw - ${drawerWidth})`,\n        },\n    },\n    navIconHide: {\n        [theme.breakpoints.up('md')]: {\n            display: 'none',\n        },\n    },\n    toolbar: theme.mixins.toolbar,\n\n    drawerPaper: {\n        width: drawerWidth,\n        [theme.breakpoints.up('md')]: {\n            position: 'relative',\n        },\n    },\n    content: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.default,\n        padding: theme.spacing.unit * 0,\n        position: 'relative'\n    },\n    title: {\n        display: 'inline',\n        textAlign: 'center',\n\n    }\n})\n\nclass ResponsiveDrawer extends Component {\n    constructor() {\n        super()\n        this.state = {\n            mobileOpen: false,\n        }\n    }\n\n\n    handleDrawerToggle = () => {\n        this.setState(state => ({mobileOpen: !state.mobileOpen}))\n    }\n\n    render() {\n        const {classes, theme} = this.props\n\n        const drawer = (\n            <div>\n                <div className={classes.toolbar}>\n                    <Filter\n                        {...this.props}\n                    />\n                </div>\n                <Divider />\n                <br />\n                <List {...this.props} />\n            </div>\n        )\n\n        return (\n            <div className={classes.root}>\n                <AppBar className={classes.appBar}>\n                    <Toolbar>\n                        <IconButton\n                            color=\"inherit\"\n                            aria-label=\"Open drawer\"\n                            onClick={this.handleDrawerToggle}\n                            className={classes.navIconHide}\n                        >\n                            <MenuIcon />\n                        </IconButton>\n                        <Typography className={classes.title}\n                            variant=\"h6\"\n                            color=\"inherit\"\n                            noWrap\n                            align=\"center\"\n                        >\n                            Dev Moines\n                        </Typography>\n                    </Toolbar>\n                </AppBar>\n                <Hidden mdUp>\n                    <SwipeableDrawer\n                        minFlingVelocity={350}\n                        variant=\"temporary\"\n                        anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n                        open={this.state.mobileOpen}\n                        onOpen={this.handleDrawerToggle}\n                        onClose={this.handleDrawerToggle}\n                        classes={{\n                            paper: classes.drawerPaper,\n                        }}\n                        ModalProps={{\n                            keepMounted: true, // Better open performance on mobile.\n                        }}\n                    >\n                        {drawer}\n                    </SwipeableDrawer>\n                </Hidden>\n                <Hidden smDown implementation=\"css\">\n                    <Drawer\n                        style={{height: '100vh', overflow: 'auto'}}\n                        variant=\"permanent\"\n                        open\n                        classes={{\n                            paper: classes.drawerPaper,\n                        }}\n                    >\n                        {drawer}\n                    </Drawer>\n                </Hidden>\n                <main className={classes.content}>\n                    <div className={classes.toolbar} />\n                    <Map\n                        {...this.props}\n                    />\n                </main>\n            </div>\n        )\n    }\n}\n\nexport default withStyles(styles, {withTheme: true})(ResponsiveDrawer)\n","/*============================================================================\\\n| Dev Moines --- React-Based Job Search App for Devs & IT Pros in Des Moines  |\n|-----------------------------------------------------------------------------|\n| Acknowledgments:                                                            |\n|                                                                             |\n| Elharony for publishing the super-helpful video series on YouTube called    |\n| \"Udacity | Neighborhood Map\". Thanks for making a complex task so simple!   |\n| Reference: https://goo.gl/gA7U2E                                            |\n|                                                                             |\n| RASG on JSFiddle (http://jsfiddle.net/RASG/X5mhL/) for demonstrating how    |\n| to simulate a mouse click on a map marker                                   |\n|                                                                             |\n| Forrest Walker on YouTube (https://goo.gl/XrrXg9) for the comprehensive     |\n| walkthrough video series on P7. I finally learned how state & props work!   |\n|                                                                             |\n| Rodrick Bloomfield @GitHub (https://github.com/bloom305) for demonstrating  |\n| many different ways to approach this project. Finding the commonalities     |\n| between them made it a LOT easier to grasp how everything fits together.    |\n| |\n| |\n\\___________________________________________________________________________*/\n\n\n/*============================ <Dependencies> ===============================\\\n\\---------------------------------------------------------------------------*/\n\n// External Theme & UI Libraries\nimport {MuiThemeProvider, createMuiTheme} from '@material-ui/core/styles'\nimport ResponsiveDrawer from './components/ResponsiveDrawer'\n\n// APIs\nimport * as gMapsAPI from './APIs/GoogleMapsAPI'\nimport * as myJsonAPI from './APIs/MyJsonAPI'\n\n// 3rd Party JS Libraries\nimport {ToastContainer, toast} from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css'\nimport axios from 'axios'\n\n// Basic React Deps\nimport './App.css'\nimport React, {Component} from 'react'\n\n/*---------------------------------------------------------------------------\\\n\\============================== </Dependencies> ============================*/\n\n\n/*================================== <App> ==================================\\\n\\---------------------------------------------------------------------------*/\n\n// set up easy access to the APIs used in this app\nconst APIs = {\n\n    // Google Maps\n    gMaps: {\n        // using the `params` attribute allows us to string multiple query\n        // parameters together later on without manual concatenation\n        params: new URLSearchParams({\n            /* To use your own API key, uncomment the line below this one... */\n            // key: `${gMapsAPI.key}`,\n\n            /* ...then comment out the line below this one...*/\n            client: `${gMapsAPI.client}`,\n\n            /* ...then open APIs/GoogleMapsApi.js & follow its instructions. */\n        })\n    },\n\n    // MyJSON.com\n    myJson: {\n        id:`${myJsonAPI.id}`,\n        url:`${myJsonAPI.url}`\n    }\n}\n\n// Preemptively silence some annoying syntax deprecation warning messages\nconst theme = createMuiTheme({\n    typography: {\n        useNextVariants: true,\n        suppressDeprecationWarnings: true\n    }\n})\n\n// App Component\nexport default class App extends Component {\n    constructor() {\n        super()\n        // Initialize state for the app\n        this.state = {\n            jobs: [],\n            filterInput: '',\n            markers: [],\n            center: {\n                lat: gMapsAPI.center.lat,\n                lng: gMapsAPI.center.lng\n            },\n            zoom: 11,\n            googleMapURL: `${gMapsAPI.url}${APIs.gMaps.params}`,\n            selected: {\n                id: '',\n                company: '',\n                position: '',\n                photo: '',\n                address:'',\n                phone: '',\n                website: ''\n            },\n            error: {\n\n            }\n        }\n    }\n\n    // Use `toastify` to render toast-style message dialogs\n    handleError = (error) => toast.error(\n        <div style={{color: 'black', fontWeight: 'bold'}}>\n            <span role=\"img\" aria-label=\"error\">‼ </span>\n            {error}\n            <span role=\"img\" aria-label=\"error\"> ‼</span>\n        </div>\n    )\n    handleOffline = () => toast.warning(\n        <div style={{color: 'black', fontWeight: 'bold'}}>\n            <span role=\"img\" aria-label=\"offline\">⦸ </span>\n            Offline Message\n            <span role=\"img\" aria-label=\"offline\"> ⦸</span>\n        </div>\n    )\n    handleCached = () => toast.success(\n        <div style={{color: 'black', fontWeight: 'bold'}}>\n            <span role=\"img\" aria-label=\"check\">✓ </span>\n            App successfully cached!\n            <span role=\"img\" aria-label=\"check\"> ✓</span><br />\n            <span role=\"img\" aria-label=\"globe-western-hemisphere\">🌎 </span>\n             Offline mode now available.\n            <span role=\"img\" aria-label=\"globe-eastern-hemisphere\"> 🌍</span>\n        </div>\n    )\n\n    // Function to close all currently-open markers on the map\n    closeAllMarkers = () => {\n        // map through all of the markers in state and set as `markers`\n        const markers = this.state.markers.map(marker => {\n            // on each marker, change its `isOpen` to false\n            marker.isOpen = false\n            // then return it\n            return marker\n        })\n        // Once all markers have been closed, update the state to match.\n        this.setState({markers: Object.assign(this.state.markers, markers)})\n    }\n\n    // Function to handle when user clicks on a map marker.\n    handleMarkerClick = marker => {\n\n        // First, close any remaining open markers\n        this.closeAllMarkers()\n\n        // set the current marker's `isOpen` to true\n        marker.isOpen = true\n\n        // create `selected` variable and set it to the job object whose\n        // id value matches that of the clicked marker\n        const selected = this.state.jobs[marker.id]\n\n        // update state of markers, selected, and center\n        this.setState({\n            markers: Object.assign(this.state.markers, marker),\n            selected: Object.assign(selected),\n            center: Object.assign({\n                // Tell the map to center itself just a hair to the North\n                // of the marker's actual coordinates, to ensure enough\n                // screen space is left for the InfoWindow to display\n                lat: (selected.latlng[0] + 0.0055),\n                lng: selected.latlng[1]\n            })})\n        setTimeout(() => {\n            this.setState({zoom: 15})\n        },1)\n\n    }\n\n    handleMapClick = () => {\n        this.closeAllMarkers()\n        this.setState({\n            center: gMapsAPI.center,\n            zoom: 11,\n            selected: {id: ''}\n        })\n    }\n\n    liftState = (o) => {\n        this.setState(o)\n    }\n\n    componentDidMount() {\n        // Use axios to get json data from MyJsonAPI\n        axios.get(`${APIs.myJson.url}${APIs.myJson.id}`)\n        // then feed the results into initJobs variable\n        .then(res => {\n            const jobs = res.data.jobs\n            const center = gMapsAPI.center\n            const markers = jobs.map(job => {\n                return {\n                    lat: job.latlng[0],\n                    lng: job.latlng[1],\n                    isOpen: false,\n                    isVisible: true,\n                    id: job.id\n                }\n            })\n            this.setState({jobs,markers,center})\n        })\n\n        // If an error occurred, collect the error message(s)\n        .catch(error => {\n            // and save it in this.state.error\n            this.handleError(error)\n        })\n\n    }\n    render() {\n        return (\n        <div className=\"App\">\n            {/*\n            <button onClick={this.handleError}>Test Error</button>\n            <button onClick={this.handleOffline}>Test Offline</button>\n            <button onClick={this.handleCached}>Test Cached</button>\n             */}\n            <MuiThemeProvider theme={theme}>\n                <ResponsiveDrawer\n                    {...this.state}\n                    handleFilterChange={this.handleFilterChange}\n                    handleMarkerClick={this.handleMarkerClick}\n                    handleMapClick={this.handleMapClick}\n                    liftState={this.liftState}\n                />\n            </MuiThemeProvider>\n            <ToastContainer\n                position='bottom-center'\n            />\n        </div>\n        )\n    }\n}\n\n/*---------------------------------------------------------------------------\\\n\\================================== </App> =================================*/\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}